{"name": "测试数据：【 2021,1,True,200,操作成功,[[2022, \"SELECT ROUND(SUM(amount1)/10000,1) as '2022年投资额',ROUND(SUM(amount2)/10000,1) as '2021年投资额',ROUND((SUM(amount1)/SUM(sum_amount))*100,1) AS '占比',data_city FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,0 as sum_amount,data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2022年第二季度' GROUP BY data_city UNION ALL SELECT 0 as amount1,0 as amount2,SUM(sum_invest_amount) as sum_amount,data_city FROM ods_glgs_sjk_report_fund_data WHERE fund_type = 1 AND `quarter` = '2022年第二季度'  GROUP BY data_city UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,0 as sum_amount,data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city )as a GROUP BY data_city\"], [2021, \"SELECT ROUND(SUM(amount1)/10000,1) as '2022年投资额',ROUND(SUM(amount2)/10000,1) as '2021年投资额',ROUND((SUM(amount2)/SUM(sum_amount))*100,1) AS '占比',data_city FROM( SELECT 0 as amount1,0 as amount2,SUM(sum_invest_amount) as sum_amount,data_city FROM ods_glgs_sjk_report_fund_data WHERE fund_type = 1 AND `quarter` = '2021年第四季度'  GROUP BY data_city UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,0 as sum_amount,data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city )as a GROUP BY data_city\"]]】", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Extra data: line 1 column 5 (char 4)", "trace": "year = 2021, isChild = 1\n\n    def get_sub_fundatlas_getChildCompleteRate(year, isChild):\n        \"\"\"\n            获取产业基金分布\n            :return: 自定义的关键字返回结果 result\n            \"\"\"\n        result = ResultBase()\n        payload = {\n            \"isChild\": isChild,\n            \"year\": year\n        }\n    \n        res = fundmap.get_child_com_plete_rate(data=payload, headers=headerform)\n        result.success = True\n        # print(res.json())\n        try:\n>           result.error = \"接口返回码是 【 {} 】, 返回信息：{} \".format(res.json()['code'], res.json()['message'])\n\n..\\..\\operation\\fundmapmain.py:376: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises ValueError: If the response body does not contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using chardet to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n>       return complexjson.loads(self.text, **kwargs)\n\n..\\..\\venv\\lib\\site-packages\\requests\\models.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '404 page not found\\n', cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nC:\\python\\lib\\json\\__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001FA715062E0>\ns = '404 page not found\\n'\n_w = <built-in method match of re.Pattern object at 0x000001FA714F5570>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n        obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end)\nE           json.decoder.JSONDecodeError: Extra data: line 1 column 5 (char 4)\n\nC:\\python\\lib\\json\\decoder.py:340: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.fundmap_test.test_subfund_04_getChildCompleteRate.TestGetMother object at 0x000001FA727BEE80>\nyear = 2021, isChild = 1, except_result = True, except_code = 200\nexcept_msg = '操作成功'\nsql = [[2022, \"SELECT ROUND(SUM(amount1)/10000,1) as '2022年投资额',ROUND(SUM(amount2)/10000,1) as '2021年投资额',ROUND((SUM(amount1...jk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city )as a GROUP BY data_city\"]]\n\n    @allure.story('用例--下设子基金财政出资情况')\n    @allure.description(\"该用例是针对下设子基金财政出资情况的测试\")\n    @allure.issue(\"https://yzw.corptssl.com/fund/PCFundMap\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://yzw.corptssl.com/fund/PCFundMap\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\"测试数据：【 {year},{isChild},{except_result},{except_code},{except_msg},{sql}】\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"year, isChild, except_result, except_code, except_msg\",\n                             api_data[\"test_sub_fund_year\"])\n    @pytest.mark.parametrize(\"sql\", api_data_sql[\"test_sub_getChildCompleteRate_sql\"])\n    def test_get_mother(self, year, isChild, except_result, except_code, except_msg, sql):\n        logger.info(\"*************** 开始执行用例 ***************\")\n>       result = get_sub_fundatlas_getChildCompleteRate(year, isChild)\n\ntest_subfund_04_getChildCompleteRate.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\operation\\fundmapmain.py:382: in get_sub_fundatlas_getChildCompleteRate\n    result.error = \"接口返回码是 【 {} 】, 返回信息：{} \".format(res.json()['code'], res.json()['msg'])\n..\\..\\venv\\lib\\site-packages\\requests\\models.py:897: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001FA715062E0>\ns = '404 page not found\\n'\n_w = <built-in method match of re.Pattern object at 0x000001FA714F5570>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n        obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end)\nE           json.decoder.JSONDecodeError: Extra data: line 1 column 5 (char 4)\n\nC:\\python\\lib\\json\\decoder.py:340: JSONDecodeError"}, "description": "该用例是针对下设子基金财政出资情况的测试", "attachments": [{"name": "log", "source": "3536544a-c67a-4979-9849-7438298fb644-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "eb8be244-7503-4e93-bf19-d1d5dccb7faf-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "sql", "value": "[[2022, \"SELECT ROUND(SUM(amount1)/10000,1) as '2022年投资额',ROUND(SUM(amount2)/10000,1) as '2021年投资额',ROUND((SUM(amount1)/SUM(sum_amount))*100,1) AS '占比',data_city FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,0 as sum_amount,data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2022年第二季度' GROUP BY data_city UNION ALL SELECT 0 as amount1,0 as amount2,SUM(sum_invest_amount) as sum_amount,data_city FROM ods_glgs_sjk_report_fund_data WHERE fund_type = 1 AND `quarter` = '2022年第二季度'  GROUP BY data_city UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,0 as sum_amount,data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city )as a GROUP BY data_city\"], [2021, \"SELECT ROUND(SUM(amount1)/10000,1) as '2022年投资额',ROUND(SUM(amount2)/10000,1) as '2021年投资额',ROUND((SUM(amount2)/SUM(sum_amount))*100,1) AS '占比',data_city FROM( SELECT 0 as amount1,0 as amount2,SUM(sum_invest_amount) as sum_amount,data_city FROM ods_glgs_sjk_report_fund_data WHERE fund_type = 1 AND `quarter` = '2021年第四季度'  GROUP BY data_city UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,0 as sum_amount,data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city )as a GROUP BY data_city\"]]"}, {"name": "year", "value": "2021"}, {"name": "isChild", "value": "1"}, {"name": "except_result", "value": "True"}, {"name": "except_code", "value": "200"}, {"name": "except_msg", "value": "'操作成功'"}], "start": 1680060319850, "stop": 1680060320122, "uuid": "73552aca-5e7c-4976-9a3f-6cefc7433973", "historyId": "ec480a158aab926eea6d2cd386fae06f", "testCaseId": "83c837f750eb6c151e3d08d18b52d7ac", "fullName": "testcases.fundmap_test.test_subfund_04_getChildCompleteRate.TestGetMother#test_get_mother", "labels": [{"name": "story", "value": "用例--下设子基金财政出资情况"}, {"name": "feature", "value": "下设子基金财政出资情况"}, {"name": "severity", "value": "normal"}, {"name": "epic", "value": "下设子基金页面"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.fundmap_test"}, {"name": "suite", "value": "test_subfund_04_getChildCompleteRate"}, {"name": "subSuite", "value": "TestGetMother"}, {"name": "host", "value": "DESKTOP-VU9M6MS"}, {"name": "thread", "value": "36988-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.fundmap_test.test_subfund_04_getChildCompleteRate"}], "links": [{"type": "test_case", "url": "https://yzw.corptssl.com/fund/PCFundMap", "name": "点击，跳转到对应用例的链接地址"}, {"type": "issue", "url": "https://yzw.corptssl.com/fund/PCFundMap", "name": "点击，跳转到对应BUG的链接地址"}]}
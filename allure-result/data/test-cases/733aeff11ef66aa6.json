{
  "uid" : "733aeff11ef66aa6",
  "name" : "测试数据：【 2022,13113,丽水市,0,1,True,200,操作成功】",
  "fullName" : "testcases.overview_test.test_overview_09_fundOverviewChildEvolute_investProgress.TestGetMother#test_get_mother",
  "historyId" : "4bf2f5628447a4c032dd1574a93561dd",
  "time" : {
    "start" : 1675132459872,
    "stop" : 1675132459879,
    "duration" : 7
  },
  "description" : "该用例是针对子基金-各地子基金投资进度的测试",
  "descriptionHtml" : "<p>该用例是针对子基金-各地子基金投资进度的测试</p>\n",
  "status" : "broken",
  "statusMessage" : "simplejson.errors.JSONDecodeError: Extra data: line 1 column 5 - line 2 column 1 (char 4 - 19)",
  "statusTrace" : "year = 2022, areaId = 13113, areaName = '丽水市', isSelf = 0, hadExit = 1\n\n    def get_fundOverviewChildEvolute_investProgress(year, areaId, areaName, isSelf, hadExit):\n        \"\"\"\n            获取产业基金分布\n            :return: 自定义的关键字返回结果 result\n            \"\"\"\n        result = ResultBase()\n        # payload = {\n        #     \"isChild\": isChild,\n        #     \"year\": year\n        # }\n    \n        res = fundmap.fundOverviewChildEvolute_invest_Progress(year, areaId, areaName, isSelf, hadExit, headers=headerform)\n        # print(res.json())\n        # result = 1\n        result.success = True\n        try:\n>           result.error = \"接口返回码是 【 {} 】, 返回信息：{} \".format(res.json()['code'], res.json()['message'])\n\noperation/fundmapmain.py:697: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises ValueError: If the response body does not contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using chardet to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n>       return complexjson.loads(self.text, **kwargs)\n\n/usr/lib/python3/dist-packages/requests/models.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '404 page not found\\n', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, use_decimal = False, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None,\n            use_decimal=False, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        *encoding* determines the encoding used to interpret any\n        :class:`str` objects decoded by this instance (``'utf-8'`` by\n        default).  It has no effect when decoding :class:`unicode` objects.\n    \n        Note that currently only encodings that are a superset of ASCII work,\n        strings of other encodings should be passed in as :class:`unicode`.\n    \n        *object_hook*, if specified, will be called with the result of every\n        JSON object decoded and its return value will be used in place of the\n        given :class:`dict`.  This can be used to provide custom\n        deserializations (e.g. to support JSON-RPC class hinting).\n    \n        *object_pairs_hook* is an optional function that will be called with\n        the result of any object literal decode with an ordered list of pairs.\n        The return value of *object_pairs_hook* will be used instead of the\n        :class:`dict`.  This feature can be used to implement custom decoders\n        that rely on the order that the key and value pairs are decoded (for\n        example, :func:`collections.OrderedDict` will remember the order of\n        insertion). If *object_hook* is also defined, the *object_pairs_hook*\n        takes priority.\n    \n        *parse_float*, if specified, will be called with the string of every\n        JSON float to be decoded.  By default, this is equivalent to\n        ``float(num_str)``. This can be used to use another datatype or parser\n        for JSON floats (e.g. :class:`decimal.Decimal`).\n    \n        *parse_int*, if specified, will be called with the string of every\n        JSON int to be decoded.  By default, this is equivalent to\n        ``int(num_str)``.  This can be used to use another datatype or parser\n        for JSON integers (e.g. :class:`float`).\n    \n        *parse_constant*, if specified, will be called with one of the\n        following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This\n        can be used to raise an exception if invalid JSON numbers are\n        encountered.\n    \n        If *use_decimal* is true (default: ``False``) then it implies\n        parse_float=decimal.Decimal for parity with ``dump``.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg. NOTE: You should use *object_hook* or *object_pairs_hook* instead\n        of subclassing whenever possible.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None\n                and not use_decimal and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/lib/python3/dist-packages/simplejson/__init__.py:518: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <simplejson.decoder.JSONDecoder object at 0x7f15f7006a60>\ns = '404 page not found\\n'\n_w = <built-in method match of re.Pattern object at 0x7f15f8c29330>, _PY3 = True\n\n    def decode(self, s, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n        instance containing a JSON document)\n    \n        \"\"\"\n        if _PY3 and isinstance(s, bytes):\n            s = str(s, self.encoding)\n        obj, end = self.raw_decode(s)\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end, len(s))\nE           simplejson.errors.JSONDecodeError: Extra data: line 1 column 5 - line 2 column 1 (char 4 - 19)\n\n/usr/lib/python3/dist-packages/simplejson/decoder.py:373: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.overview_test.test_overview_09_fundOverviewChildEvolute_investProgress.TestGetMother object at 0x7f15f69e3ca0>\nyear = 2022, areaId = 13113, areaName = '丽水市', isSelf = 0, hadExit = 1\nexcept_result = True, except_code = 200, except_msg = '操作成功'\nsql = [[2022, \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data... IS NULL or `status` in(1,2)) GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\"]]\n\n    @allure.story('用例--子基金-各地子基金投资进度')\n    @allure.description(\"该用例是针对子基金-各地子基金投资进度的测试\")\n    @allure.issue(\"https://yzw.corptssl.com/fundOverview/fundOverviewData\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://yzw.corptssl.com/fundOverview/fundOverviewData\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\n        \"测试数据：【 {year},{areaId},{areaName},{isSelf},{hadExit},{except_result},{except_code},{except_msg}】\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"year, areaId, areaName, isSelf, hadExit, except_result, except_code, except_msg\",\n                             api_data[\"test_investProgress_year_city\"])\n    @pytest.mark.parametrize(\"sql\", api_data_sql[\"test_overview_fundOverviewChildEvolute_investProgress_sql\"])\n    # isself:0市，1市本级，hadExit: 1是 0不是\n    def test_get_mother(self, year, areaId, areaName, isSelf, hadExit, except_result, except_code, except_msg, sql):\n        logger.info(\"*************** 开始执行用例 ***************\")\n>       result = get_fundOverviewChildEvolute_investProgress(year, areaId, areaName, isSelf, hadExit)\n\ntestcases/overview_test/test_overview_09_fundOverviewChildEvolute_investProgress.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \noperation/fundmapmain.py:703: in get_fundOverviewChildEvolute_investProgress\n    result.error = \"接口返回码是 【 {} 】, 返回信息：{} \".format(res.json()['code'], res.json()['msg'])\n/usr/lib/python3/dist-packages/requests/models.py:897: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/lib/python3/dist-packages/simplejson/__init__.py:518: in loads\n    return _default_decoder.decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <simplejson.decoder.JSONDecoder object at 0x7f15f7006a60>\ns = '404 page not found\\n'\n_w = <built-in method match of re.Pattern object at 0x7f15f8c29330>, _PY3 = True\n\n    def decode(self, s, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n        instance containing a JSON document)\n    \n        \"\"\"\n        if _PY3 and isinstance(s, bytes):\n            s = str(s, self.encoding)\n        obj, end = self.raw_decode(s)\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end, len(s))\nE           simplejson.errors.JSONDecodeError: Extra data: line 1 column 5 - line 2 column 1 (char 4 - 19)\n\n/usr/lib/python3/dist-packages/simplejson/decoder.py:373: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "delete_output_dir",
    "time" : {
      "start" : 1675132372541,
      "stop" : 1675132372542,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1675132372541,
      "stop" : 1675132372541,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1675132372541,
      "stop" : 1675132372541,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1675132372541,
      "stop" : 1675132372541,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "该用例是针对子基金-各地子基金投资进度的测试",
    "status" : "broken",
    "statusMessage" : "simplejson.errors.JSONDecodeError: Extra data: line 1 column 5 - line 2 column 1 (char 4 - 19)",
    "statusTrace" : "year = 2022, areaId = 13113, areaName = '丽水市', isSelf = 0, hadExit = 1\n\n    def get_fundOverviewChildEvolute_investProgress(year, areaId, areaName, isSelf, hadExit):\n        \"\"\"\n            获取产业基金分布\n            :return: 自定义的关键字返回结果 result\n            \"\"\"\n        result = ResultBase()\n        # payload = {\n        #     \"isChild\": isChild,\n        #     \"year\": year\n        # }\n    \n        res = fundmap.fundOverviewChildEvolute_invest_Progress(year, areaId, areaName, isSelf, hadExit, headers=headerform)\n        # print(res.json())\n        # result = 1\n        result.success = True\n        try:\n>           result.error = \"接口返回码是 【 {} 】, 返回信息：{} \".format(res.json()['code'], res.json()['message'])\n\noperation/fundmapmain.py:697: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises ValueError: If the response body does not contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using chardet to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n>       return complexjson.loads(self.text, **kwargs)\n\n/usr/lib/python3/dist-packages/requests/models.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '404 page not found\\n', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, use_decimal = False, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None,\n            use_decimal=False, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        *encoding* determines the encoding used to interpret any\n        :class:`str` objects decoded by this instance (``'utf-8'`` by\n        default).  It has no effect when decoding :class:`unicode` objects.\n    \n        Note that currently only encodings that are a superset of ASCII work,\n        strings of other encodings should be passed in as :class:`unicode`.\n    \n        *object_hook*, if specified, will be called with the result of every\n        JSON object decoded and its return value will be used in place of the\n        given :class:`dict`.  This can be used to provide custom\n        deserializations (e.g. to support JSON-RPC class hinting).\n    \n        *object_pairs_hook* is an optional function that will be called with\n        the result of any object literal decode with an ordered list of pairs.\n        The return value of *object_pairs_hook* will be used instead of the\n        :class:`dict`.  This feature can be used to implement custom decoders\n        that rely on the order that the key and value pairs are decoded (for\n        example, :func:`collections.OrderedDict` will remember the order of\n        insertion). If *object_hook* is also defined, the *object_pairs_hook*\n        takes priority.\n    \n        *parse_float*, if specified, will be called with the string of every\n        JSON float to be decoded.  By default, this is equivalent to\n        ``float(num_str)``. This can be used to use another datatype or parser\n        for JSON floats (e.g. :class:`decimal.Decimal`).\n    \n        *parse_int*, if specified, will be called with the string of every\n        JSON int to be decoded.  By default, this is equivalent to\n        ``int(num_str)``.  This can be used to use another datatype or parser\n        for JSON integers (e.g. :class:`float`).\n    \n        *parse_constant*, if specified, will be called with one of the\n        following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This\n        can be used to raise an exception if invalid JSON numbers are\n        encountered.\n    \n        If *use_decimal* is true (default: ``False``) then it implies\n        parse_float=decimal.Decimal for parity with ``dump``.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg. NOTE: You should use *object_hook* or *object_pairs_hook* instead\n        of subclassing whenever possible.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None\n                and not use_decimal and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/lib/python3/dist-packages/simplejson/__init__.py:518: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <simplejson.decoder.JSONDecoder object at 0x7f15f7006a60>\ns = '404 page not found\\n'\n_w = <built-in method match of re.Pattern object at 0x7f15f8c29330>, _PY3 = True\n\n    def decode(self, s, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n        instance containing a JSON document)\n    \n        \"\"\"\n        if _PY3 and isinstance(s, bytes):\n            s = str(s, self.encoding)\n        obj, end = self.raw_decode(s)\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end, len(s))\nE           simplejson.errors.JSONDecodeError: Extra data: line 1 column 5 - line 2 column 1 (char 4 - 19)\n\n/usr/lib/python3/dist-packages/simplejson/decoder.py:373: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.overview_test.test_overview_09_fundOverviewChildEvolute_investProgress.TestGetMother object at 0x7f15f69e3ca0>\nyear = 2022, areaId = 13113, areaName = '丽水市', isSelf = 0, hadExit = 1\nexcept_result = True, except_code = 200, except_msg = '操作成功'\nsql = [[2022, \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data... IS NULL or `status` in(1,2)) GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\"]]\n\n    @allure.story('用例--子基金-各地子基金投资进度')\n    @allure.description(\"该用例是针对子基金-各地子基金投资进度的测试\")\n    @allure.issue(\"https://yzw.corptssl.com/fundOverview/fundOverviewData\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://yzw.corptssl.com/fundOverview/fundOverviewData\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\n        \"测试数据：【 {year},{areaId},{areaName},{isSelf},{hadExit},{except_result},{except_code},{except_msg}】\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"year, areaId, areaName, isSelf, hadExit, except_result, except_code, except_msg\",\n                             api_data[\"test_investProgress_year_city\"])\n    @pytest.mark.parametrize(\"sql\", api_data_sql[\"test_overview_fundOverviewChildEvolute_investProgress_sql\"])\n    # isself:0市，1市本级，hadExit: 1是 0不是\n    def test_get_mother(self, year, areaId, areaName, isSelf, hadExit, except_result, except_code, except_msg, sql):\n        logger.info(\"*************** 开始执行用例 ***************\")\n>       result = get_fundOverviewChildEvolute_investProgress(year, areaId, areaName, isSelf, hadExit)\n\ntestcases/overview_test/test_overview_09_fundOverviewChildEvolute_investProgress.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \noperation/fundmapmain.py:703: in get_fundOverviewChildEvolute_investProgress\n    result.error = \"接口返回码是 【 {} 】, 返回信息：{} \".format(res.json()['code'], res.json()['msg'])\n/usr/lib/python3/dist-packages/requests/models.py:897: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/lib/python3/dist-packages/simplejson/__init__.py:518: in loads\n    return _default_decoder.decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <simplejson.decoder.JSONDecoder object at 0x7f15f7006a60>\ns = '404 page not found\\n'\n_w = <built-in method match of re.Pattern object at 0x7f15f8c29330>, _PY3 = True\n\n    def decode(self, s, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n        instance containing a JSON document)\n    \n        \"\"\"\n        if _PY3 and isinstance(s, bytes):\n            s = str(s, self.encoding)\n        obj, end = self.raw_decode(s)\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end, len(s))\nE           simplejson.errors.JSONDecodeError: Extra data: line 1 column 5 - line 2 column 1 (char 4 - 19)\n\n/usr/lib/python3/dist-packages/simplejson/decoder.py:373: JSONDecodeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "623259500dbe4ad7",
      "name" : "log",
      "source" : "623259500dbe4ad7.txt",
      "type" : "text/plain",
      "size" : 1276
    }, {
      "uid" : "57482bd60996d77b",
      "name" : "stderr",
      "source" : "57482bd60996d77b.txt",
      "type" : "text/plain",
      "size" : 1466
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "用例--子基金-各地子基金投资进度"
  }, {
    "name" : "feature",
    "value" : "子基金-各地子基金投资进度"
  }, {
    "name" : "epic",
    "value" : "基金总览"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "tag",
    "value" : "single"
  }, {
    "name" : "parentSuite",
    "value" : "testcases.overview_test"
  }, {
    "name" : "suite",
    "value" : "test_overview_09_fundOverviewChildEvolute_investProgress"
  }, {
    "name" : "subSuite",
    "value" : "TestGetMother"
  }, {
    "name" : "host",
    "value" : "dev-business-01"
  }, {
    "name" : "thread",
    "value" : "1477482-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.overview_test.test_overview_09_fundOverviewChildEvolute_investProgress"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "areaId",
    "value" : "13113"
  }, {
    "name" : "areaName",
    "value" : "'丽水市'"
  }, {
    "name" : "except_code",
    "value" : "200"
  }, {
    "name" : "except_msg",
    "value" : "'操作成功'"
  }, {
    "name" : "except_result",
    "value" : "True"
  }, {
    "name" : "hadExit",
    "value" : "1"
  }, {
    "name" : "isSelf",
    "value" : "0"
  }, {
    "name" : "sql",
    "value" : "[[2022, \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2022年第二季度' GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\", \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2022年第二季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\"], [2021, \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2020年第四季度' GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\", \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2020年第四季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\"]]"
  }, {
    "name" : "year",
    "value" : "2022"
  } ],
  "links" : [ {
    "name" : "点击，跳转到对应用例的链接地址",
    "url" : "https://yzw.corptssl.com/fundOverview/fundOverviewData",
    "type" : "test_case"
  }, {
    "name" : "点击，跳转到对应BUG的链接地址",
    "url" : "https://yzw.corptssl.com/fundOverview/fundOverviewData",
    "type" : "issue"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 8,
        "unknown" : 0,
        "total" : 9
      },
      "items" : [ {
        "uid" : "2b65f73e401fa7a7",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/22/allure/#testresult/2b65f73e401fa7a7",
        "status" : "passed",
        "time" : {
          "start" : 1667543277701,
          "stop" : 1667543277925,
          "duration" : 224
        }
      }, {
        "uid" : "2c17a21e3afb739f",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/21/allure/#testresult/2c17a21e3afb739f",
        "status" : "passed",
        "time" : {
          "start" : 1667543277701,
          "stop" : 1667543277925,
          "duration" : 224
        }
      }, {
        "uid" : "1297a025aee53a24",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/20/allure/#testresult/1297a025aee53a24",
        "status" : "passed",
        "time" : {
          "start" : 1667525750999,
          "stop" : 1667525751400,
          "duration" : 401
        }
      }, {
        "uid" : "bfcf3ba34ea1b114",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/19/allure/#testresult/bfcf3ba34ea1b114",
        "status" : "passed",
        "time" : {
          "start" : 1667445441312,
          "stop" : 1667445441677,
          "duration" : 365
        }
      }, {
        "uid" : "8c2d0a47be77b19d",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/18/allure/#testresult/8c2d0a47be77b19d",
        "status" : "passed",
        "time" : {
          "start" : 1666776987769,
          "stop" : 1666776988200,
          "duration" : 431
        }
      }, {
        "uid" : "52380c344625cb3b",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/14/allure/#testresult/52380c344625cb3b",
        "status" : "passed",
        "time" : {
          "start" : 1666682880988,
          "stop" : 1666682881369,
          "duration" : 381
        }
      }, {
        "uid" : "b19ac406aab73d75",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/13/allure/#testresult/b19ac406aab73d75",
        "status" : "passed",
        "time" : {
          "start" : 1666679827785,
          "stop" : 1666679827797,
          "duration" : 12
        }
      }, {
        "uid" : "e73a3f07e7bcb24f",
        "reportUrl" : "http://192.168.201.9:8088/job/Api_fund_test/10/allure/#testresult/e73a3f07e7bcb24f",
        "status" : "passed",
        "time" : {
          "start" : 1666256897754,
          "stop" : 1666256898180,
          "duration" : 426
        }
      } ]
    },
    "tags" : [ "single" ]
  },
  "source" : "733aeff11ef66aa6.json",
  "parameterValues" : [ "13113", "'丽水市'", "200", "'操作成功'", "True", "1", "0", "[[2022, \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2022年第二季度' GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\", \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2022年第二季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\"], [2021, \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2020年第四季度' GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\", \"SELECT ROUND((SUM(amount1)-SUM(amount2))/10000,1) as '2022年新增',ROUND(SUM(amount2)/10000,1) as '2021年投资额',data_city,data_county FROM( SELECT SUM(fund_invest_amount) as amount1,0 as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2021年第四季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county UNION ALL SELECT 0 as amount1,SUM(fund_invest_amount) as amount2,CASE WHEN data_county IS NULL THEN '市级' ELSE data_county END AS data_county,CASE WHEN data_city IS NULL THEN '省级' ELSE data_city END as data_city FROM ods_glgs_sjk_report_project_data WHERE project_type = 2 and `quarter` ='2020年第四季度' and (`status` IS NULL or `status` in(1,2)) GROUP BY data_city,data_county )as a GROUP BY data_city,data_county ORDER BY data_city\"]]", "2022" ]
}